//THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// src/constants.js
var require_constants = __commonJS({
  "src/constants.js"(exports2, module2) {
    var DEFAULT_SETTINGS2 = {
      separator: "\n----\n"
    };
    module2.exports = {
      DEFAULT_SETTINGS: DEFAULT_SETTINGS2
    };
  }
});

// src/commands.js
var require_commands = __commonJS({
  "src/commands.js"(exports2, module2) {
    var { Notice } = require("obsidian");
    var CommandManager2 = class {
      constructor(plugin) {
        this.plugin = plugin;
      }
      registerAllCommands() {
        this.registerWritingCommands();
        this.registerModelCommands();
        this.registerUtilityCommands();
      }
      registerWritingCommands() {
        this.plugin.addCommand({
          id: "set-prompt",
          hotkeys: [{ modifiers: ["Alt"], key: "S" }],
          name: "Set user prompt",
          callback: () => {
            new Notice(`Set user prompt`);
            this.plugin.sendNoteCommand("set_prompt");
          }
        });
        this.plugin.addCommand({
          id: "write-scene",
          name: "Write Scene",
          hotkeys: [{ modifiers: ["Alt"], key: "W" }],
          callback: () => {
            new Notice(`Write Scene`);
            this.plugin.sendNoteCommand("write_scene");
          }
        });
        this.plugin.addCommand({
          id: "custom-prompt",
          name: "Custom Prompt",
          hotkeys: [{ modifiers: ["Alt"], key: "C" }],
          callback: () => {
            new Notice(`Custom Prompt`);
            this.plugin.sendNoteCommand("custom_prompt");
          }
        });
        this.plugin.addCommand({
          id: "remove-last-response",
          name: "Remove Last Response",
          hotkeys: [{ modifiers: ["Alt"], key: "Z" }],
          callback: () => {
            new Notice(`Remove Last Response`);
            this.plugin.sendNoteCommand("remove_last_response");
          }
        });
        this.plugin.addCommand({
          id: "interrupt-write",
          name: "Interrupt Write",
          hotkeys: [{ modifiers: ["Alt"], key: "Q" }],
          callback: () => {
            new Notice(`Interrupt Write`);
            this.plugin.sendNoteCommand("interrupt_write");
          }
        });
        this.plugin.addCommand({
          id: "rewrite-selection",
          name: "Rewrite selection",
          callback: () => {
            new Notice(`Rewrite selection`);
            this.plugin.rewriteSelection();
          }
        });
        this.plugin.addCommand({
          id: "rewrite-part",
          name: "Rewrite part",
          callback: () => {
            new Notice(`Rewrite part`);
            this.plugin.sendNoteCommand("rewrite_part");
          }
        });
        this.plugin.addCommand({
          id: "rewrite-parts",
          name: "Rewrite this and following parts",
          callback: () => {
            new Notice(`Rewrite this and following parts`);
            this.plugin.sendNoteCommand("rewrite_parts");
          }
        });
        this.plugin.addCommand({
          id: "regenerate",
          name: "Regenerate",
          callback: () => {
            new Notice(`Regenerate`);
            this.plugin.sendNoteCommand("regenerate");
          }
        });
        this.plugin.addCommand({
          id: "add-part",
          name: "Add Part",
          callback: () => {
            new Notice(`Add Part`);
            this.plugin.sendNoteCommand("add_part");
          }
        });
        this.plugin.addCommand({
          id: "summarize",
          name: "Summarize story",
          callback: () => {
            new Notice(`Summarize story`);
            this.plugin.sendNoteCommand("summarize");
          }
        });
        this.plugin.addCommand({
          id: "update-summary",
          name: "Update summary",
          callback: () => {
            new Notice(`Update summary`);
            this.plugin.sendNoteCommand("update_summary");
          }
        });
        this.plugin.addCommand({
          id: "translate",
          name: "Translate selection",
          callback: () => {
            new Notice(`Translate selection`);
            this.plugin.translateSelection();
          }
        });
        this.plugin.addCommand({
          id: "explain",
          name: "Explain selected word",
          callback: () => {
            new Notice(`Explain selected word`);
            this.plugin.explainWord();
          }
        });
      }
      registerModelCommands() {
        this.plugin.addCommand({
          id: "set-model-1",
          name: "Set model 1",
          hotkeys: [{ modifiers: ["Alt"], key: "1" }],
          callback: async () => {
            new Notice(`Set model 1`);
            await this.plugin.setModelNumber("1");
          }
        });
        this.plugin.addCommand({
          id: "set-model-2",
          name: "Set model 2",
          hotkeys: [{ modifiers: ["Alt"], key: "2" }],
          callback: async () => {
            new Notice(`Set model 2`);
            await this.plugin.setModelNumber("2");
          }
        });
        this.plugin.addCommand({
          id: "set-model-3",
          name: "Set model 3",
          hotkeys: [{ modifiers: ["Alt"], key: "3" }],
          callback: async () => {
            new Notice(`Set model 3`);
            await this.plugin.setModelNumber("3");
          }
        });
        this.plugin.addCommand({
          id: "set-model-4",
          name: "Set model 4",
          hotkeys: [{ modifiers: ["Alt"], key: "4" }],
          callback: async () => {
            new Notice(`Set model 4`);
            await this.plugin.setModelNumber("4");
          }
        });
        this.plugin.addCommand({
          id: "set-model-5",
          name: "Set model 5",
          hotkeys: [{ modifiers: ["Alt"], key: "5" }],
          callback: async () => {
            new Notice(`Set model 5`);
            await this.plugin.setModelNumber("5");
          }
        });
        this.plugin.addCommand({
          id: "reset-model",
          name: "Reset model",
          hotkeys: [{ modifiers: ["Alt"], key: "R" }],
          callback: async () => {
            new Notice(`Reset model`);
            await this.plugin.setModelNumber("");
          }
        });
      }
      registerUtilityCommands() {
        this.plugin.addCommand({
          id: "switch-debug",
          name: "Switch Debug Mode On/Off",
          callback: () => {
            new Notice(`Switch Debug Mode On/Off`);
            this.plugin.sendNoteCommand("switch_debug");
          }
        });
      }
    };
    module2.exports = CommandManager2;
  }
});

// src/communication.js
var require_communication = __commonJS({
  "src/communication.js"(exports2, module2) {
    var net = require("net");
    var CommunicationManager2 = class {
      constructor(plugin) {
        this.plugin = plugin;
      }
      async sendNoteCommand(methodName, selected_text = "") {
        this.plugin.app.commands.executeCommandById("editor:save-file");
        var absoluteFolderPath = this.plugin.getNotePath();
        var partNumber = this.plugin.getPartNumber();
        var parameters = `${absoluteFolderPath},${methodName},${partNumber},${selected_text}`;
        const response = await this.sendCommandToServer(parameters);
        return response;
      }
      async sendCommandToServer(command) {
        return new Promise((resolve, reject) => {
          const client = new net.Socket();
          let response = "";
          client.connect(9993, "localhost", () => {
            console.log("Connected to Python server");
            client.write(command);
          });
          client.on("data", (data) => {
            response += data.toString();
            client.destroy();
          });
          client.on("close", () => {
            console.log("Connection closed");
            resolve(response);
          });
          client.on("error", (err) => {
            console.error("Connection error: ", err);
            reject(err);
          });
        });
      }
    };
    module2.exports = CommunicationManager2;
  }
});

// src/utilities.js
var require_utilities = __commonJS({
  "src/utilities.js"(exports2, module2) {
    var { Notice } = require("obsidian");
    var path = require("path");
    var UtilityManager2 = class {
      constructor(plugin) {
        this.plugin = plugin;
      }
      async setModelNumber(modelInt) {
        const activeFile = this.plugin.app.workspace.getActiveFile();
        if (!activeFile) {
          new Notice("No active file");
          return;
        }
        const activeFileFolder = activeFile.parent;
        const settingsFilePath = activeFileFolder.path + "/Settings/Settings.md";
        const settingsFile = this.plugin.app.vault.getAbstractFileByPath(settingsFilePath);
        if (!settingsFile || settingsFile.extension !== "md") {
          new Notice("Settings file not found at ./Settings/Settings.md");
          return;
        }
        await this.plugin.app.fileManager.processFrontMatter(settingsFile, (frontmatter) => {
          frontmatter.model = modelInt;
        });
      }
      getPartNumber() {
        const editor = this.plugin.app.workspace.activeLeaf.view.editor;
        const cursor = editor.getCursor();
        const textBeforeCursor = editor.getRange({ line: 0, ch: 0 }, cursor);
        const regex = new RegExp(this.plugin.settings.separator.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "g");
        const matches = textBeforeCursor.match(regex);
        var count = matches ? matches.length : 0;
        count = count + 1;
        return count;
      }
      getNotePath() {
        var _a;
        const activeFile = this.plugin.app.workspace.getActiveFile();
        if (activeFile) {
          const vaultPath = this.plugin.app.vault.adapter.basePath;
          const folderPath = ((_a = activeFile.parent) == null ? void 0 : _a.path) || "";
          const absoluteFolderPath = path.join(vaultPath, folderPath);
          return absoluteFolderPath;
        } else {
          console.log("No file is currently open");
        }
      }
      async rewriteSelection() {
        const editor = this.plugin.app.workspace.activeLeaf.view.editor;
        const selection = editor.getSelection();
        if (!selection) {
          new Notice("No selection found");
          return;
        }
        const response = await this.plugin.communicationManager.sendNoteCommand("rewrite_selection", selection);
        if (!response) {
          new Notice("No response received");
          return;
        }
        if (editor.somethingSelected()) {
          editor.replaceSelection(response);
        } else {
          new Notice("No selection found");
        }
      }
      async translateSelection() {
        const editor = this.plugin.app.workspace.activeLeaf.view.editor;
        const selection = editor.getSelection();
        if (!selection) {
          new Notice("No selection found");
          return;
        }
        const response = await this.plugin.communicationManager.sendNoteCommand("translate", selection);
        if (!response) {
          new Notice("No response received");
          return;
        }
        new Notice(response);
      }
      async explainWord() {
        const editor = this.plugin.app.workspace.activeLeaf.view.editor;
        const selection = editor.getSelection();
        if (!selection) {
          new Notice("No selection found");
          return;
        }
        const response = await this.plugin.communicationManager.sendNoteCommand("explain", selection);
        if (!response) {
          new Notice("No response received");
          return;
        }
        new Notice(response);
      }
    };
    module2.exports = UtilityManager2;
  }
});

// src/settings.js
var require_settings = __commonJS({
  "src/settings.js"(exports2, module2) {
    var { PluginSettingTab, Setting } = require("obsidian");
    var MyPluginSettingTab2 = class extends PluginSettingTab {
      constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
      }
      display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Plugin Settings" });
        new Setting(containerEl).setName("Separator text").setDesc("Text pattern to match for counting parts").addText((text) => text.setPlaceholder("----").setValue(this.plugin.settings.separator).onChange(async (value) => {
          this.plugin.settings.separator = value;
          await this.plugin.saveSettings();
        }));
      }
    };
    module2.exports = MyPluginSettingTab2;
  }
});

// src/main.js
var { Plugin } = require("obsidian");
var { DEFAULT_SETTINGS } = require_constants();
var CommandManager = require_commands();
var CommunicationManager = require_communication();
var UtilityManager = require_utilities();
var MyPluginSettingTab = require_settings();
var MyPlugin = class extends Plugin {
  async onload() {
    await this.loadSettings();
    this.commandManager = new CommandManager(this);
    this.communicationManager = new CommunicationManager(this);
    this.utilityManager = new UtilityManager(this);
    this.addSettingTab(new MyPluginSettingTab(this.app, this));
    this.commandManager.registerAllCommands();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // Delegate methods to utility manager
  async setModelNumber(modelInt) {
    return await this.utilityManager.setModelNumber(modelInt);
  }
  getPartNumber() {
    return this.utilityManager.getPartNumber();
  }
  getNotePath() {
    return this.utilityManager.getNotePath();
  }
  async rewriteSelection() {
    return await this.utilityManager.rewriteSelection();
  }
  async translateSelection() {
    return await this.utilityManager.translateSelection();
  }
  async explainWord() {
    return await this.utilityManager.explainWord();
  }
  // Delegate methods to communication manager
  async sendNoteCommand(methodName, selected_text = "") {
    return await this.communicationManager.sendNoteCommand(methodName, selected_text);
  }
  async sendCommandToServer(command) {
    return await this.communicationManager.sendCommandToServer(command);
  }
};
module.exports = MyPlugin;
