//THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// src/constants.js
var require_constants = __commonJS({
  "src/constants.js"(exports2, module2) {
    var DEFAULT_SETTINGS2 = {
      separator: "\n----\n"
    };
    module2.exports = {
      DEFAULT_SETTINGS: DEFAULT_SETTINGS2
    };
  }
});

// src/commands.js
var require_commands = __commonJS({
  "src/commands.js"(exports2, module2) {
    var { Notice } = require("obsidian");
    var CommandManager2 = class {
      constructor(plugin) {
        this.plugin = plugin;
        this.commands = this.getCommandsHash();
      }
      getCommandsHash() {
        return {
          "set-prompt": {
            name: "Set user prompt",
            hotkeys: [{ modifiers: ["Alt"], key: "S" }],
            callback: () => this.plugin.communicationManager.sendNoteCommand("set_prompt")
          },
          "write-scene-or-chat": {
            name: "Write Scene/Chat",
            hotkeys: [{ modifiers: ["Alt"], key: "W" }],
            callback: () => this.plugin.communicationManager.sendNoteCommand("write_scene_or_chat")
          },
          "custom-prompt": {
            name: "Custom Prompt",
            hotkeys: [{ modifiers: ["Alt"], key: "C" }],
            callback: () => this.plugin.communicationManager.sendNoteCommand("custom_prompt")
          },
          "remove-last-response": {
            name: "Remove Last Response",
            hotkeys: [{ modifiers: ["Alt"], key: "Z" }],
            callback: () => this.plugin.communicationManager.sendNoteCommand("remove_last_response")
          },
          "rewrite-part": {
            name: "Rewrite part",
            callback: () => this.plugin.communicationManager.sendNoteCommand("rewrite_part")
          },
          "rewrite-parts": {
            name: "Rewrite this and following parts",
            callback: () => this.plugin.communicationManager.sendNoteCommand("rewrite_parts")
          },
          "regenerate": {
            name: "Regenerate",
            callback: () => this.plugin.communicationManager.sendNoteCommand("regenerate")
          },
          "add-part": {
            name: "Add Part",
            callback: () => this.plugin.communicationManager.sendNoteCommand("add_part")
          },
          "summarize": {
            name: "Summarize story",
            callback: () => this.plugin.communicationManager.sendNoteCommand("summarize")
          },
          "update-summary": {
            name: "Update summary",
            callback: () => this.plugin.communicationManager.sendNoteCommand("update_summary")
          },
          "set-model-1": {
            name: "Set model 1",
            hotkeys: [{ modifiers: ["Alt"], key: "1" }],
            callback: async () => await this.plugin.utilityManager.setModelNumber("1")
          },
          "set-model-2": {
            name: "Set model 2",
            hotkeys: [{ modifiers: ["Alt"], key: "2" }],
            callback: async () => await this.plugin.utilityManager.setModelNumber("2")
          },
          "set-model-3": {
            name: "Set model 3",
            hotkeys: [{ modifiers: ["Alt"], key: "3" }],
            callback: async () => await this.plugin.utilityManager.setModelNumber("3")
          },
          "set-model-4": {
            name: "Set model 4",
            hotkeys: [{ modifiers: ["Alt"], key: "4" }],
            callback: async () => await this.plugin.utilityManager.setModelNumber("4")
          },
          "set-model-5": {
            name: "Set model 5",
            hotkeys: [{ modifiers: ["Alt"], key: "5" }],
            callback: async () => await this.plugin.utilityManager.setModelNumber("5")
          },
          "reset-model": {
            name: "Reset model",
            hotkeys: [{ modifiers: ["Alt"], key: "R" }],
            callback: async () => await this.plugin.utilityManager.setModelNumber("")
          },
          "rewrite-selection": {
            name: "Rewrite selection",
            callback: () => this.plugin.helperManager.rewriteSelection()
          },
          "translate": {
            name: "Translate selection",
            callback: () => this.plugin.helperManager.translateSelection()
          },
          "explain": {
            name: "Explain selected word",
            callback: () => this.plugin.helperManager.explainWord()
          },
          "switch-debug": {
            name: "Switch Debug Mode On/Off",
            callback: () => this.plugin.communicationManager.sendNoteCommand("switch_debug")
          },
          "interrupt-write": {
            name: "Interrupt Write",
            hotkeys: [{ modifiers: ["Alt"], key: "Q" }],
            callback: () => this.plugin.communicationManager.sendNoteCommand("interrupt_write")
          }
        };
      }
      registerAllCommands() {
        Object.entries(this.commands).forEach(([id, config]) => {
          this.registerCommand(id, config);
        });
      }
      registerCommand(id, config) {
        const commandConfig = {
          id,
          name: config.name,
          callback: () => {
            new Notice(config.name);
            config.callback();
          }
        };
        if (config.hotkeys) {
          commandConfig.hotkeys = config.hotkeys;
        }
        this.plugin.addCommand(commandConfig);
      }
    };
    module2.exports = CommandManager2;
  }
});

// src/communication.js
var require_communication = __commonJS({
  "src/communication.js"(exports2, module2) {
    var net = require("net");
    var CommunicationManager2 = class {
      constructor(plugin) {
        this.plugin = plugin;
      }
      async sendNoteCommand(methodName, selected_text = "") {
        this.plugin.app.commands.executeCommandById("editor:save-file");
        var [absoluteFolderPath, absoluteFilePath] = this.plugin.utilityManager.getPaths();
        var partNumber = this.plugin.utilityManager.getPartNumber();
        var chatMode = await this.plugin.utilityManager.getMode();
        if (methodName == "write_scene_or_chat") {
          if (chatMode) {
            methodName = "chat";
          } else {
            methodName = "write_scene";
          }
        }
        if (methodName == "remove_last_response") {
          if (chatMode) {
            methodName = "chat_remove_last_response";
          } else {
            methodName = "story_remove_last_response";
          }
        }
        var parameters = `${absoluteFolderPath},${absoluteFilePath},${methodName},${chatMode},${partNumber},${selected_text}`;
        const response = await this.sendCommandToServer(parameters);
        return response;
      }
      async sendCommandToServer(command) {
        return new Promise((resolve, reject) => {
          const client = new net.Socket();
          let response = "";
          client.connect(9993, "localhost", () => {
            console.log("Connected to Python server");
            client.write(command);
          });
          client.on("data", (data) => {
            response += data.toString();
            client.destroy();
          });
          client.on("close", () => {
            console.log("Connection closed");
            resolve(response);
          });
          client.on("error", (err) => {
            console.error("Connection error: ", err);
            reject(err);
          });
        });
      }
    };
    module2.exports = CommunicationManager2;
  }
});

// src/utilities.js
var require_utilities = __commonJS({
  "src/utilities.js"(exports2, module2) {
    var { Notice } = require("obsidian");
    var path = require("path");
    var UtilityManager2 = class {
      constructor(plugin) {
        this.plugin = plugin;
      }
      async setStoryModelNumber(modelInt) {
        const activeFile = this.plugin.app.workspace.getActiveFile();
        if (!activeFile) {
          new Notice("No active file");
          return;
        }
        const activeFileFolder = activeFile.parent;
        const settingsFilePath = activeFileFolder.path + "/Settings/Settings.md";
        const settingsFile = this.plugin.app.vault.getAbstractFileByPath(settingsFilePath);
        if (!settingsFile || settingsFile.extension !== "md") {
          new Notice("Settings file not found at ./Settings/Settings.md");
          return;
        }
        await this.plugin.app.fileManager.processFrontMatter(settingsFile, (frontmatter) => {
          frontmatter.model = modelInt;
        });
      }
      async setChatModelNumber(modelInt) {
        const activeFile = this.plugin.app.workspace.getActiveFile();
        if (!activeFile) {
          new Notice("No active file");
          return;
        }
        await this.plugin.app.fileManager.processFrontMatter(activeFile, (frontmatter) => {
          frontmatter.model = modelInt;
        });
      }
      async setModelNumber(modelInt) {
        var chatMode = await this.getMode();
        if (chatMode) {
          await this.setChatModelNumber(modelInt);
        } else {
          await this.setStoryModelNumber(modelInt);
        }
      }
      async getMode() {
        const note = app.workspace.getActiveFile();
        const content = await app.vault.read(note);
        return /```\s*Custom instructions:/i.test(content);
      }
      getPartNumber() {
        const editor = this.plugin.app.workspace.activeLeaf.view.editor;
        const cursor = editor.getCursor();
        const textBeforeCursor = editor.getRange({ line: 0, ch: 0 }, cursor);
        const regex = new RegExp(this.plugin.settings.separator.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "g");
        const matches = textBeforeCursor.match(regex);
        var count = matches ? matches.length : 0;
        count = count + 1;
        return count;
      }
      getPaths() {
        var _a;
        const activeFile = this.plugin.app.workspace.getActiveFile();
        if (!activeFile) {
          console.log("No file is currently open");
          return;
        }
        const vaultPath = this.plugin.app.vault.adapter.basePath;
        const folderPath = ((_a = activeFile.parent) == null ? void 0 : _a.path) || "";
        const absoluteFolderPath = path.join(vaultPath, folderPath);
        const absoluteFilePath = path.join(vaultPath, activeFile.path);
        return [absoluteFolderPath, absoluteFilePath];
      }
    };
    module2.exports = UtilityManager2;
  }
});

// src/helpers.js
var require_helpers = __commonJS({
  "src/helpers.js"(exports2, module2) {
    var { Notice } = require("obsidian");
    var HelperManager2 = class {
      constructor(plugin) {
        this.plugin = plugin;
      }
      _getEditor() {
        return this.plugin.app.workspace.activeLeaf.view.editor;
      }
      async _processSelection(command) {
        const editor = this._getEditor();
        const selection = editor.getSelection();
        if (!selection) {
          new Notice("No selection found");
          return null;
        }
        const response = await this.plugin.communicationManager.sendNoteCommand(command, selection);
        if (!response) {
          new Notice("No response received");
          return null;
        }
        return response;
      }
      async rewriteSelection() {
        const response = await this._processSelection("rewrite_selection");
        if (!response)
          return;
        const editor = this._getEditor();
        if (editor.somethingSelected()) {
          editor.replaceSelection(response);
        } else {
          new Notice("No selection found");
        }
      }
      async translateSelection() {
        const response = await this._processSelection("translate");
        if (response) {
          new Notice(response);
        }
      }
      async explainWord() {
        const response = await this._processSelection("explain");
        if (response) {
          new Notice(response);
        }
      }
    };
    module2.exports = HelperManager2;
  }
});

// src/settings.js
var require_settings = __commonJS({
  "src/settings.js"(exports2, module2) {
    var { PluginSettingTab, Setting } = require("obsidian");
    var MyPluginSettingTab2 = class extends PluginSettingTab {
      constructor(app2, plugin) {
        super(app2, plugin);
        this.plugin = plugin;
      }
      display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Plugin Settings" });
        new Setting(containerEl).setName("Separator text").setDesc("Text pattern to match for counting parts").addText((text) => text.setPlaceholder("----").setValue(this.plugin.settings.separator).onChange(async (value) => {
          this.plugin.settings.separator = value;
          await this.plugin.saveSettings();
        }));
      }
    };
    module2.exports = MyPluginSettingTab2;
  }
});

// src/main.js
var { Plugin } = require("obsidian");
var { DEFAULT_SETTINGS } = require_constants();
var CommandManager = require_commands();
var CommunicationManager = require_communication();
var UtilityManager = require_utilities();
var HelperManager = require_helpers();
var MyPluginSettingTab = require_settings();
var MyPlugin = class extends Plugin {
  async onload() {
    await this.loadSettings();
    this.commandManager = new CommandManager(this);
    this.communicationManager = new CommunicationManager(this);
    this.utilityManager = new UtilityManager(this);
    this.helperManager = new HelperManager(this);
    this.addSettingTab(new MyPluginSettingTab(this.app, this));
    this.commandManager.registerAllCommands();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
module.exports = MyPlugin;
